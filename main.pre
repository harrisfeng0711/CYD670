
# 1 "D:\MyWorks\CYD670(C16F883)\CYD670\main.c"

# 118 "C:\Program Files\HI-TECH Software\PICC\9.83\include\pic16f883.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned RP : 2;
unsigned IRP : 1;
};
struct {
unsigned : 5;
unsigned RP0 : 1;
unsigned RP1 : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;

volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;
volatile bit RA6 @ ((unsigned)&PORTA*8)+6;
volatile bit RA7 @ ((unsigned)&PORTA*8)+7;

volatile union {
struct {
unsigned RA0 : 1;
unsigned RA1 : 1;
unsigned RA2 : 1;
unsigned RA3 : 1;
unsigned RA4 : 1;
unsigned RA5 : 1;
unsigned RA6 : 1;
unsigned RA7 : 1;
};
} PORTAbits @ 0x005;



volatile unsigned char PORTB @ 0x006;

volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;

volatile union {
struct {
unsigned RB0 : 1;
unsigned RB1 : 1;
unsigned RB2 : 1;
unsigned RB3 : 1;
unsigned RB4 : 1;
unsigned RB5 : 1;
unsigned RB6 : 1;
unsigned RB7 : 1;
};
} PORTBbits @ 0x006;



volatile unsigned char PORTC @ 0x007;

volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;

volatile union {
struct {
unsigned RC0 : 1;
unsigned RC1 : 1;
unsigned RC2 : 1;
unsigned RC3 : 1;
unsigned RC4 : 1;
unsigned RC5 : 1;
unsigned RC6 : 1;
unsigned RC7 : 1;
};
} PORTCbits @ 0x007;



volatile unsigned char PORTE @ 0x009;

volatile bit RE3 @ ((unsigned)&PORTE*8)+3;

volatile union {
struct {
unsigned : 3;
unsigned RE3 : 1;
};
} PORTEbits @ 0x009;



volatile unsigned char PCLATH @ 0x00A;


volatile union {
struct {
unsigned : 5;
};
} PCLATHbits @ 0x00A;



volatile unsigned char INTCON @ 0x00B;

volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit TMR0IF @ ((unsigned)&INTCON*8)+2;
volatile bit TMR0IE @ ((unsigned)&INTCON*8)+5;

volatile union {
struct {
unsigned RBIF : 1;
unsigned INTF : 1;
unsigned T0IF : 1;
unsigned RBIE : 1;
unsigned INTE : 1;
unsigned T0IE : 1;
unsigned PEIE : 1;
unsigned GIE : 1;
};
struct {
unsigned : 2;
unsigned TMR0IF : 1;
unsigned : 2;
unsigned TMR0IE : 1;
};
} INTCONbits @ 0x00B;



volatile unsigned char PIR1 @ 0x00C;

volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;
volatile bit PSPIF @ ((unsigned)&PIR1*8)+7;

volatile union {
struct {
unsigned TMR1IF : 1;
unsigned TMR2IF : 1;
unsigned CCP1IF : 1;
unsigned SSPIF : 1;
unsigned TXIF : 1;
unsigned RCIF : 1;
unsigned ADIF : 1;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 2;
unsigned : 1;
unsigned PSPIF : 1;
};
} PIR1bits @ 0x00C;



volatile unsigned char PIR2 @ 0x00D;

volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit ULPWUIF @ ((unsigned)&PIR2*8)+2;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit C1IF @ ((unsigned)&PIR2*8)+5;
volatile bit C2IF @ ((unsigned)&PIR2*8)+6;
volatile bit OSFIF @ ((unsigned)&PIR2*8)+7;

volatile union {
struct {
unsigned CCP2IF : 1;
unsigned : 1;
unsigned ULPWUIF : 1;
unsigned BCLIF : 1;
unsigned EEIF : 1;
unsigned C1IF : 1;
unsigned C2IF : 1;
unsigned OSFIF : 1;
};
} PIR2bits @ 0x00D;




volatile unsigned char TMR1L @ 0x00E;



volatile unsigned char TMR1H @ 0x00F;



volatile unsigned int TMR1 @ 0x00E;


volatile unsigned char T1CON @ 0x010;

volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit nT1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit TMR1GE @ ((unsigned)&T1CON*8)+6;
volatile bit T1GINV @ ((unsigned)&T1CON*8)+7;
volatile bit T1INSYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit T1GIV @ ((unsigned)&T1CON*8)+7;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;

volatile union {
struct {
unsigned TMR1ON : 1;
unsigned TMR1CS : 1;
unsigned nT1SYNC : 1;
unsigned T1OSCEN : 1;
unsigned T1CKPS : 2;
unsigned TMR1GE : 1;
unsigned T1GINV : 1;
};
struct {
unsigned : 2;
unsigned T1INSYNC : 1;
unsigned : 1;
unsigned T1CKPS0 : 1;
unsigned T1CKPS1 : 1;
unsigned : 1;
unsigned T1GIV : 1;
};
struct {
unsigned : 2;
unsigned T1SYNC : 1;
};
} T1CONbits @ 0x010;



volatile unsigned char TMR2 @ 0x011;



volatile unsigned char T2CON @ 0x012;

volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;

volatile union {
struct {
unsigned T2CKPS : 2;
unsigned TMR2ON : 1;
unsigned TOUTPS : 4;
};
struct {
unsigned T2CKPS0 : 1;
unsigned T2CKPS1 : 1;
unsigned : 1;
unsigned TOUTPS0 : 1;
unsigned TOUTPS1 : 1;
unsigned TOUTPS2 : 1;
unsigned TOUTPS3 : 1;
};
} T2CONbits @ 0x012;



volatile unsigned char SSPBUF @ 0x013;



volatile unsigned char SSPCON @ 0x014;

volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;
volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;

volatile union {
struct {
unsigned SSPM : 4;
unsigned CKP : 1;
unsigned SSPEN : 1;
unsigned SSPOV : 1;
unsigned WCOL : 1;
};
struct {
unsigned SSPM0 : 1;
unsigned SSPM1 : 1;
unsigned SSPM2 : 1;
unsigned SSPM3 : 1;
};
} SSPCONbits @ 0x014;




volatile unsigned char CCPR1L @ 0x015;



volatile unsigned char CCPR1H @ 0x016;



volatile unsigned int CCPR1 @ 0x015;


volatile unsigned char CCP1CON @ 0x017;

volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit DC1B0 @ ((unsigned)&CCP1CON*8)+4;
volatile bit DC1B1 @ ((unsigned)&CCP1CON*8)+5;
volatile bit P1M0 @ ((unsigned)&CCP1CON*8)+6;
volatile bit P1M1 @ ((unsigned)&CCP1CON*8)+7;
volatile bit CCP1Y @ ((unsigned)&CCP1CON*8)+4;
volatile bit CCP1X @ ((unsigned)&CCP1CON*8)+5;

volatile union {
struct {
unsigned CCP1M : 4;
unsigned DC1B : 2;
unsigned P1M : 2;
};
struct {
unsigned CCP1M0 : 1;
unsigned CCP1M1 : 1;
unsigned CCP1M2 : 1;
unsigned CCP1M3 : 1;
unsigned DC1B0 : 1;
unsigned DC1B1 : 1;
unsigned P1M0 : 1;
unsigned P1M1 : 1;
};
struct {
unsigned : 4;
unsigned CCP1Y : 1;
unsigned CCP1X : 1;
};
} CCP1CONbits @ 0x017;



volatile unsigned char RCSTA @ 0x018;

volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit ADDEN @ ((unsigned)&RCSTA*8)+3;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit RX9 @ ((unsigned)&RCSTA*8)+6;
volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;
volatile bit RCD8 @ ((unsigned)&RCSTA*8)+0;
volatile bit RC9 @ ((unsigned)&RCSTA*8)+6;
volatile bit nRC8 @ ((unsigned)&RCSTA*8)+6;
volatile bit RC8_9 @ ((unsigned)&RCSTA*8)+6;

volatile union {
struct {
unsigned RX9D : 1;
unsigned OERR : 1;
unsigned FERR : 1;
unsigned ADDEN : 1;
unsigned CREN : 1;
unsigned SREN : 1;
unsigned RX9 : 1;
unsigned SPEN : 1;
};
struct {
unsigned RCD8 : 1;
unsigned : 5;
unsigned RC9 : 1;
};
struct {
unsigned : 6;
unsigned nRC8 : 1;
};
struct {
unsigned : 6;
unsigned RC8_9 : 1;
};
} RCSTAbits @ 0x018;



volatile unsigned char TXREG @ 0x019;



volatile unsigned char RCREG @ 0x01A;




volatile unsigned char CCPR2L @ 0x01B;



volatile unsigned char CCPR2H @ 0x01C;



volatile unsigned int CCPR2 @ 0x01B;


volatile unsigned char CCP2CON @ 0x01D;

volatile bit DC2B0 @ ((unsigned)&CCP2CON*8)+4;
volatile bit DC2B1 @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;
volatile bit CCP2Y @ ((unsigned)&CCP2CON*8)+4;
volatile bit CCP2X @ ((unsigned)&CCP2CON*8)+5;

volatile union {
struct {
unsigned CCP2M : 4;
unsigned DC2B0 : 1;
unsigned DC2B1 : 1;
};
struct {
unsigned CCP2M0 : 1;
unsigned CCP2M1 : 1;
unsigned CCP2M2 : 1;
unsigned CCP2M3 : 1;
unsigned CCP2Y : 1;
unsigned CCP2X : 1;
};
} CCP2CONbits @ 0x01D;



volatile unsigned char ADRESH @ 0x01E;



volatile unsigned char ADCON0 @ 0x01F;

volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GO_nDONE @ ((unsigned)&ADCON0*8)+1;
volatile bit GO @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
volatile bit nDONE @ ((unsigned)&ADCON0*8)+1;
volatile bit GO_DONE @ ((unsigned)&ADCON0*8)+1;

volatile union {
struct {
unsigned ADON : 1;
unsigned GO_nDONE : 1;
unsigned CHS : 4;
unsigned ADCS : 2;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 4;
unsigned : 2;
};
struct {
unsigned : 1;
unsigned GO : 1;
unsigned CHS0 : 1;
unsigned CHS1 : 1;
unsigned CHS2 : 1;
unsigned CHS3 : 1;
unsigned ADCS0 : 1;
unsigned ADCS1 : 1;
};
struct {
unsigned : 1;
unsigned nDONE : 1;
};
struct {
unsigned : 1;
unsigned GO_DONE : 1;
};
} ADCON0bits @ 0x01F;

# 678
volatile unsigned char OPTION_REG @ 0x081;

volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit nRBPU @ ((unsigned)&OPTION_REG*8)+7;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;

volatile union {
struct {
unsigned PS : 3;
unsigned PSA : 1;
unsigned T0SE : 1;
unsigned T0CS : 1;
unsigned INTEDG : 1;
unsigned nRBPU : 1;
};
struct {
unsigned PS0 : 1;
unsigned PS1 : 1;
unsigned PS2 : 1;
};
} OPTION_REGbits @ 0x081;



volatile unsigned char TRISA @ 0x085;

volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;

volatile union {
struct {
unsigned TRISA0 : 1;
unsigned TRISA1 : 1;
unsigned TRISA2 : 1;
unsigned TRISA3 : 1;
unsigned TRISA4 : 1;
unsigned TRISA5 : 1;
unsigned TRISA6 : 1;
unsigned TRISA7 : 1;
};
} TRISAbits @ 0x085;



volatile unsigned char TRISB @ 0x086;

volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;

volatile union {
struct {
unsigned TRISB0 : 1;
unsigned TRISB1 : 1;
unsigned TRISB2 : 1;
unsigned TRISB3 : 1;
unsigned TRISB4 : 1;
unsigned TRISB5 : 1;
unsigned TRISB6 : 1;
unsigned TRISB7 : 1;
};
} TRISBbits @ 0x086;



volatile unsigned char TRISC @ 0x087;

volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;

volatile union {
struct {
unsigned TRISC0 : 1;
unsigned TRISC1 : 1;
unsigned TRISC2 : 1;
unsigned TRISC3 : 1;
unsigned TRISC4 : 1;
unsigned TRISC5 : 1;
unsigned TRISC6 : 1;
unsigned TRISC7 : 1;
};
} TRISCbits @ 0x087;



volatile unsigned char TRISE @ 0x089;

volatile bit TRISE3 @ ((unsigned)&TRISE*8)+3;

volatile union {
struct {
unsigned : 3;
unsigned TRISE3 : 1;
};
} TRISEbits @ 0x089;



volatile unsigned char PIE1 @ 0x08C;

volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;

volatile union {
struct {
unsigned TMR1IE : 1;
unsigned TMR2IE : 1;
unsigned CCP1IE : 1;
unsigned SSPIE : 1;
unsigned TXIE : 1;
unsigned RCIE : 1;
unsigned ADIE : 1;
};
} PIE1bits @ 0x08C;



volatile unsigned char PIE2 @ 0x08D;

volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit ULPWUIE @ ((unsigned)&PIE2*8)+2;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit C1IE @ ((unsigned)&PIE2*8)+5;
volatile bit C2IE @ ((unsigned)&PIE2*8)+6;
volatile bit OSFIE @ ((unsigned)&PIE2*8)+7;

volatile union {
struct {
unsigned CCP2IE : 1;
unsigned : 1;
unsigned ULPWUIE : 1;
unsigned BCLIE : 1;
unsigned EEIE : 1;
unsigned C1IE : 1;
unsigned C2IE : 1;
unsigned OSFIE : 1;
};
} PIE2bits @ 0x08D;



volatile unsigned char PCON @ 0x08E;

volatile bit nBOR @ ((unsigned)&PCON*8)+0;
volatile bit nPOR @ ((unsigned)&PCON*8)+1;
volatile bit SBOREN @ ((unsigned)&PCON*8)+4;
volatile bit ULPWUE @ ((unsigned)&PCON*8)+5;
volatile bit nBO @ ((unsigned)&PCON*8)+0;

volatile union {
struct {
unsigned nBOR : 1;
unsigned nPOR : 1;
unsigned : 2;
unsigned SBOREN : 1;
unsigned ULPWUE : 1;
};
struct {
unsigned nBO : 1;
};
} PCONbits @ 0x08E;



volatile unsigned char OSCCON @ 0x08F;

volatile bit SCS @ ((unsigned)&OSCCON*8)+0;
volatile bit LTS @ ((unsigned)&OSCCON*8)+1;
volatile bit HTS @ ((unsigned)&OSCCON*8)+2;
volatile bit OSTS @ ((unsigned)&OSCCON*8)+3;
volatile bit IRCF0 @ ((unsigned)&OSCCON*8)+4;
volatile bit IRCF1 @ ((unsigned)&OSCCON*8)+5;
volatile bit IRCF2 @ ((unsigned)&OSCCON*8)+6;

volatile union {
struct {
unsigned SCS : 1;
unsigned LTS : 1;
unsigned HTS : 1;
unsigned OSTS : 1;
unsigned IRFC : 3;
};
struct {
unsigned : 4;
unsigned IRCF0 : 1;
unsigned IRCF1 : 1;
unsigned IRCF2 : 1;
};
} OSCCONbits @ 0x08F;



volatile unsigned char OSCTUNE @ 0x090;

volatile bit TUN0 @ ((unsigned)&OSCTUNE*8)+0;
volatile bit TUN1 @ ((unsigned)&OSCTUNE*8)+1;
volatile bit TUN2 @ ((unsigned)&OSCTUNE*8)+2;
volatile bit TUN3 @ ((unsigned)&OSCTUNE*8)+3;
volatile bit TUN4 @ ((unsigned)&OSCTUNE*8)+4;

volatile union {
struct {
unsigned TUN : 5;
};
struct {
unsigned TUN0 : 1;
unsigned TUN1 : 1;
unsigned TUN2 : 1;
unsigned TUN3 : 1;
unsigned TUN4 : 1;
};
} OSCTUNEbits @ 0x090;



volatile unsigned char SSPCON2 @ 0x091;

volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;

volatile union {
struct {
unsigned SEN : 1;
unsigned RSEN : 1;
unsigned PEN : 1;
unsigned RCEN : 1;
unsigned ACKEN : 1;
unsigned ACKDT : 1;
unsigned ACKSTAT : 1;
unsigned GCEN : 1;
};
} SSPCON2bits @ 0x091;



volatile unsigned char PR2 @ 0x092;



volatile unsigned char SSPADD @ 0x093;



volatile unsigned char SSPMSK @ 0x093;
volatile unsigned char MSK @ 0x093;

volatile bit MSK0 @ ((unsigned)&SSPMSK*8)+0;
volatile bit MSK1 @ ((unsigned)&SSPMSK*8)+1;
volatile bit MSK2 @ ((unsigned)&SSPMSK*8)+2;
volatile bit MSK3 @ ((unsigned)&SSPMSK*8)+3;
volatile bit MSK4 @ ((unsigned)&SSPMSK*8)+4;
volatile bit MSK5 @ ((unsigned)&SSPMSK*8)+5;
volatile bit MSK6 @ ((unsigned)&SSPMSK*8)+6;
volatile bit MSK7 @ ((unsigned)&SSPMSK*8)+7;

volatile union {
struct {
unsigned MSK0 : 1;
unsigned MSK1 : 1;
unsigned MSK2 : 1;
unsigned MSK3 : 1;
unsigned MSK4 : 1;
unsigned MSK5 : 1;
unsigned MSK6 : 1;
unsigned MSK7 : 1;
};
} SSPMSKbits @ 0x093;



volatile unsigned char SSPSTAT @ 0x094;

volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit R_nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit S @ ((unsigned)&SSPSTAT*8)+3;
volatile bit P @ ((unsigned)&SSPSTAT*8)+4;
volatile bit D_nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;
volatile bit R @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D @ ((unsigned)&SSPSTAT*8)+5;
volatile bit I2C_READ @ ((unsigned)&SSPSTAT*8)+2;
volatile bit I2C_START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit I2C_STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit I2C_DATA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nWRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nADDRESS @ ((unsigned)&SSPSTAT*8)+5;
volatile bit R_W @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D_A @ ((unsigned)&SSPSTAT*8)+5;
volatile bit READ_WRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit DATA_ADDRESS @ ((unsigned)&SSPSTAT*8)+5;

volatile union {
struct {
unsigned BF : 1;
unsigned UA : 1;
unsigned R_nW : 1;
unsigned S : 1;
unsigned P : 1;
unsigned D_nA : 1;
unsigned CKE : 1;
unsigned SMP : 1;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
};
struct {
unsigned : 2;
unsigned R : 1;
unsigned : 2;
unsigned D : 1;
};
struct {
unsigned : 2;
unsigned I2C_READ : 1;
unsigned I2C_START : 1;
unsigned I2C_STOP : 1;
unsigned I2C_DATA : 1;
};
struct {
unsigned : 2;
unsigned nW : 1;
unsigned : 2;
unsigned nA : 1;
};
struct {
unsigned : 2;
unsigned nWRITE : 1;
unsigned : 2;
unsigned nADDRESS : 1;
};
struct {
unsigned : 2;
unsigned R_W : 1;
unsigned : 2;
unsigned D_A : 1;
};
struct {
unsigned : 2;
unsigned READ_WRITE : 1;
unsigned : 2;
unsigned DATA_ADDRESS : 1;
};
} SSPSTATbits @ 0x094;



volatile unsigned char WPUB @ 0x095;

volatile bit WPUB0 @ ((unsigned)&WPUB*8)+0;
volatile bit WPUB1 @ ((unsigned)&WPUB*8)+1;
volatile bit WPUB2 @ ((unsigned)&WPUB*8)+2;
volatile bit WPUB3 @ ((unsigned)&WPUB*8)+3;
volatile bit WPUB4 @ ((unsigned)&WPUB*8)+4;
volatile bit WPUB5 @ ((unsigned)&WPUB*8)+5;
volatile bit WPUB6 @ ((unsigned)&WPUB*8)+6;
volatile bit WPUB7 @ ((unsigned)&WPUB*8)+7;

volatile union {
struct {
unsigned WPUB0 : 1;
unsigned WPUB1 : 1;
unsigned WPUB2 : 1;
unsigned WPUB3 : 1;
unsigned WPUB4 : 1;
unsigned WPUB5 : 1;
unsigned WPUB6 : 1;
unsigned WPUB7 : 1;
};
} WPUBbits @ 0x095;



volatile unsigned char IOCB @ 0x096;

volatile bit IOCB0 @ ((unsigned)&IOCB*8)+0;
volatile bit IOCB1 @ ((unsigned)&IOCB*8)+1;
volatile bit IOCB2 @ ((unsigned)&IOCB*8)+2;
volatile bit IOCB3 @ ((unsigned)&IOCB*8)+3;
volatile bit IOCB4 @ ((unsigned)&IOCB*8)+4;
volatile bit IOCB5 @ ((unsigned)&IOCB*8)+5;
volatile bit IOCB6 @ ((unsigned)&IOCB*8)+6;
volatile bit IOCB7 @ ((unsigned)&IOCB*8)+7;

volatile union {
struct {
unsigned IOCB0 : 1;
unsigned IOCB1 : 1;
unsigned IOCB2 : 1;
unsigned IOCB3 : 1;
unsigned IOCB4 : 1;
unsigned IOCB5 : 1;
unsigned IOCB6 : 1;
unsigned IOCB7 : 1;
};
} IOCBbits @ 0x096;



volatile unsigned char VRCON @ 0x097;

volatile bit VRSS @ ((unsigned)&VRCON*8)+4;
volatile bit VRR @ ((unsigned)&VRCON*8)+5;
volatile bit VROE @ ((unsigned)&VRCON*8)+6;
volatile bit VREN @ ((unsigned)&VRCON*8)+7;
volatile bit VR0 @ ((unsigned)&VRCON*8)+0;
volatile bit VR1 @ ((unsigned)&VRCON*8)+1;
volatile bit VR2 @ ((unsigned)&VRCON*8)+2;
volatile bit VR3 @ ((unsigned)&VRCON*8)+3;

volatile union {
struct {
unsigned VR : 4;
unsigned VRSS : 1;
unsigned VRR : 1;
unsigned VROE : 1;
unsigned VREN : 1;
};
struct {
unsigned VR0 : 1;
unsigned VR1 : 1;
unsigned VR2 : 1;
unsigned VR3 : 1;
};
} VRCONbits @ 0x097;



volatile unsigned char TXSTA @ 0x098;

volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit BRGH @ ((unsigned)&TXSTA*8)+2;
volatile bit SENDB @ ((unsigned)&TXSTA*8)+3;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit TX9 @ ((unsigned)&TXSTA*8)+6;
volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;
volatile bit TXD8 @ ((unsigned)&TXSTA*8)+0;
volatile bit nTX8 @ ((unsigned)&TXSTA*8)+6;
volatile bit TX8_9 @ ((unsigned)&TXSTA*8)+6;

volatile union {
struct {
unsigned TX9D : 1;
unsigned TRMT : 1;
unsigned BRGH : 1;
unsigned SENDB : 1;
unsigned SYNC : 1;
unsigned TXEN : 1;
unsigned TX9 : 1;
unsigned CSRC : 1;
};
struct {
unsigned TXD8 : 1;
unsigned : 5;
unsigned nTX8 : 1;
};
struct {
unsigned : 6;
unsigned TX8_9 : 1;
};
} TXSTAbits @ 0x098;



volatile unsigned char SPBRG @ 0x099;

volatile bit BRG0 @ ((unsigned)&SPBRG*8)+0;
volatile bit BRG1 @ ((unsigned)&SPBRG*8)+1;
volatile bit BRG2 @ ((unsigned)&SPBRG*8)+2;
volatile bit BRG3 @ ((unsigned)&SPBRG*8)+3;
volatile bit BRG4 @ ((unsigned)&SPBRG*8)+4;
volatile bit BRG5 @ ((unsigned)&SPBRG*8)+5;
volatile bit BRG6 @ ((unsigned)&SPBRG*8)+6;
volatile bit BRG7 @ ((unsigned)&SPBRG*8)+7;

volatile union {
struct {
unsigned BRG0 : 1;
unsigned BRG1 : 1;
unsigned BRG2 : 1;
unsigned BRG3 : 1;
unsigned BRG4 : 1;
unsigned BRG5 : 1;
unsigned BRG6 : 1;
unsigned BRG7 : 1;
};
} SPBRGbits @ 0x099;



volatile unsigned char SPBRGH @ 0x09A;

volatile bit BRG8 @ ((unsigned)&SPBRGH*8)+0;
volatile bit BRG9 @ ((unsigned)&SPBRGH*8)+1;
volatile bit BRG10 @ ((unsigned)&SPBRGH*8)+2;
volatile bit BRG11 @ ((unsigned)&SPBRGH*8)+3;
volatile bit BRG12 @ ((unsigned)&SPBRGH*8)+4;
volatile bit BRG13 @ ((unsigned)&SPBRGH*8)+5;
volatile bit BRG14 @ ((unsigned)&SPBRGH*8)+6;
volatile bit BRG15 @ ((unsigned)&SPBRGH*8)+7;

volatile union {
struct {
unsigned BRG8 : 1;
unsigned BRG9 : 1;
unsigned BRG10 : 1;
unsigned BRG11 : 1;
unsigned BRG12 : 1;
unsigned BRG13 : 1;
unsigned BRG14 : 1;
unsigned BRG15 : 1;
};
} SPBRGHbits @ 0x09A;



volatile unsigned char PWM1CON @ 0x09B;

volatile bit PRSEN @ ((unsigned)&PWM1CON*8)+7;
volatile bit PDC0 @ ((unsigned)&PWM1CON*8)+0;
volatile bit PDC1 @ ((unsigned)&PWM1CON*8)+1;
volatile bit PDC2 @ ((unsigned)&PWM1CON*8)+2;
volatile bit PDC3 @ ((unsigned)&PWM1CON*8)+3;
volatile bit PDC4 @ ((unsigned)&PWM1CON*8)+4;
volatile bit PDC5 @ ((unsigned)&PWM1CON*8)+5;
volatile bit PDC6 @ ((unsigned)&PWM1CON*8)+6;

volatile union {
struct {
unsigned PDC : 7;
unsigned PRSEN : 1;
};
struct {
unsigned PDC0 : 1;
unsigned PDC1 : 1;
unsigned PDC2 : 1;
unsigned PDC3 : 1;
unsigned PDC4 : 1;
unsigned PDC5 : 1;
unsigned PDC6 : 1;
};
} PWM1CONbits @ 0x09B;



volatile unsigned char ECCPAS @ 0x09C;

volatile bit ECCPASE @ ((unsigned)&ECCPAS*8)+7;
volatile bit PSSBD0 @ ((unsigned)&ECCPAS*8)+0;
volatile bit PSSBD1 @ ((unsigned)&ECCPAS*8)+1;
volatile bit PSSAC0 @ ((unsigned)&ECCPAS*8)+2;
volatile bit PSSAC1 @ ((unsigned)&ECCPAS*8)+3;
volatile bit ECCPAS0 @ ((unsigned)&ECCPAS*8)+4;
volatile bit ECCPAS1 @ ((unsigned)&ECCPAS*8)+5;
volatile bit ECCPAS2 @ ((unsigned)&ECCPAS*8)+6;

volatile union {
struct {
unsigned PSSBD : 2;
unsigned PSSAC : 2;
unsigned ECCPAS : 3;
unsigned ECCPASE : 1;
};
struct {
unsigned PSSBD0 : 1;
unsigned PSSBD1 : 1;
unsigned PSSAC0 : 1;
unsigned PSSAC1 : 1;
unsigned ECCPAS0 : 1;
unsigned ECCPAS1 : 1;
unsigned ECCPAS2 : 1;
};
} ECCPASbits @ 0x09C;



volatile unsigned char PSTRCON @ 0x09D;

volatile bit STRA @ ((unsigned)&PSTRCON*8)+0;
volatile bit STRB @ ((unsigned)&PSTRCON*8)+1;
volatile bit STRC @ ((unsigned)&PSTRCON*8)+2;
volatile bit STRD @ ((unsigned)&PSTRCON*8)+3;
volatile bit STRSYNC @ ((unsigned)&PSTRCON*8)+4;

volatile union {
struct {
unsigned STRA : 1;
unsigned STRB : 1;
unsigned STRC : 1;
unsigned STRD : 1;
unsigned STRSYNC : 1;
};
} PSTRCONbits @ 0x09D;



volatile unsigned char ADRESL @ 0x09E;



volatile unsigned char ADCON1 @ 0x09F;

volatile bit VCFG0 @ ((unsigned)&ADCON1*8)+4;
volatile bit VCFG1 @ ((unsigned)&ADCON1*8)+5;
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;

volatile union {
struct {
unsigned : 4;
unsigned VCFG0 : 1;
unsigned VCFG1 : 1;
unsigned : 1;
unsigned ADFM : 1;
};
} ADCON1bits @ 0x09F;

# 1347
volatile unsigned char WDTCON @ 0x105;

volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;
volatile bit WDTPS0 @ ((unsigned)&WDTCON*8)+1;
volatile bit WDTPS1 @ ((unsigned)&WDTCON*8)+2;
volatile bit WDTPS2 @ ((unsigned)&WDTCON*8)+3;
volatile bit WDTPS3 @ ((unsigned)&WDTCON*8)+4;

volatile union {
struct {
unsigned SWDTEN : 1;
unsigned WDTPS : 4;
};
struct {
unsigned : 1;
unsigned WDTPS0 : 1;
unsigned WDTPS1 : 1;
unsigned WDTPS2 : 1;
unsigned WDTPS3 : 1;
};
} WDTCONbits @ 0x105;



volatile unsigned char CM1CON0 @ 0x107;

volatile bit C1R @ ((unsigned)&CM1CON0*8)+2;
volatile bit C1POL @ ((unsigned)&CM1CON0*8)+4;
volatile bit C1OE @ ((unsigned)&CM1CON0*8)+5;
volatile bit C1OUT @ ((unsigned)&CM1CON0*8)+6;
volatile bit C1ON @ ((unsigned)&CM1CON0*8)+7;
volatile bit C1CH0 @ ((unsigned)&CM1CON0*8)+0;
volatile bit C1CH1 @ ((unsigned)&CM1CON0*8)+1;

volatile union {
struct {
unsigned C1CH : 2;
unsigned C1R : 1;
unsigned : 1;
unsigned C1POL : 1;
unsigned C1OE : 1;
unsigned C1OUT : 1;
unsigned C1ON : 1;
};
struct {
unsigned C1CH0 : 1;
unsigned C1CH1 : 1;
};
} CM1CON0bits @ 0x107;



volatile unsigned char CM2CON0 @ 0x108;

volatile bit C2R @ ((unsigned)&CM2CON0*8)+2;
volatile bit C2POL @ ((unsigned)&CM2CON0*8)+4;
volatile bit C2OE @ ((unsigned)&CM2CON0*8)+5;
volatile bit C2OUT @ ((unsigned)&CM2CON0*8)+6;
volatile bit C2ON @ ((unsigned)&CM2CON0*8)+7;
volatile bit C2CH0 @ ((unsigned)&CM2CON0*8)+0;
volatile bit C2CH1 @ ((unsigned)&CM2CON0*8)+1;

volatile union {
struct {
unsigned C2CH : 2;
unsigned C2R : 1;
unsigned : 1;
unsigned C2POL : 1;
unsigned C2OE : 1;
unsigned C2OUT : 1;
unsigned C2ON : 1;
};
struct {
unsigned C2CH0 : 1;
unsigned C2CH1 : 1;
};
} CM2CON0bits @ 0x108;



volatile unsigned char CM2CON1 @ 0x109;

volatile bit C2SYNC @ ((unsigned)&CM2CON1*8)+0;
volatile bit T1GSS @ ((unsigned)&CM2CON1*8)+1;
volatile bit C2RSEL @ ((unsigned)&CM2CON1*8)+4;
volatile bit C1RSEL @ ((unsigned)&CM2CON1*8)+5;
volatile bit MC2OUT @ ((unsigned)&CM2CON1*8)+6;
volatile bit MC1OUT @ ((unsigned)&CM2CON1*8)+7;

volatile union {
struct {
unsigned C2SYNC : 1;
unsigned T1GSS : 1;
unsigned : 2;
unsigned C2RSEL : 1;
unsigned C1RSEL : 1;
unsigned MC2OUT : 1;
unsigned MC1OUT : 1;
};
} CM2CON1bits @ 0x109;



volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEDAT @ 0x10C;



volatile unsigned char EEADR @ 0x10D;



volatile unsigned char EEDATH @ 0x10E;


volatile union {
struct {
unsigned : 6;
};
} EEDATHbits @ 0x10E;



volatile unsigned char EEADRH @ 0x10F;


volatile union {
struct {
unsigned : 5;
};
} EEADRHbits @ 0x10F;

# 1486
volatile unsigned char SRCON @ 0x185;

volatile bit FVREN @ ((unsigned)&SRCON*8)+0;
volatile bit PULSR @ ((unsigned)&SRCON*8)+2;
volatile bit PULSS @ ((unsigned)&SRCON*8)+3;
volatile bit C2REN @ ((unsigned)&SRCON*8)+4;
volatile bit C1SEN @ ((unsigned)&SRCON*8)+5;
volatile bit SR0 @ ((unsigned)&SRCON*8)+6;
volatile bit SR1 @ ((unsigned)&SRCON*8)+7;

volatile union {
struct {
unsigned FVREN : 1;
unsigned : 1;
unsigned PULSR : 1;
unsigned PULSS : 1;
unsigned C2REN : 1;
unsigned C1SEN : 1;
unsigned SR0 : 1;
unsigned SR1 : 1;
};
} SRCONbits @ 0x185;



volatile unsigned char BAUDCTL @ 0x187;

volatile bit ABDEN @ ((unsigned)&BAUDCTL*8)+0;
volatile bit WUE @ ((unsigned)&BAUDCTL*8)+1;
volatile bit BRG16 @ ((unsigned)&BAUDCTL*8)+3;
volatile bit SCKP @ ((unsigned)&BAUDCTL*8)+4;
volatile bit RCIDL @ ((unsigned)&BAUDCTL*8)+6;
volatile bit ABDOVF @ ((unsigned)&BAUDCTL*8)+7;

volatile union {
struct {
unsigned ABDEN : 1;
unsigned WUE : 1;
unsigned : 1;
unsigned BRG16 : 1;
unsigned SCKP : 1;
unsigned : 1;
unsigned RCIDL : 1;
unsigned ABDOVF : 1;
};
} BAUDCTLbits @ 0x187;



volatile unsigned char ANSEL @ 0x188;

volatile bit ANS0 @ ((unsigned)&ANSEL*8)+0;
volatile bit ANS1 @ ((unsigned)&ANSEL*8)+1;
volatile bit ANS2 @ ((unsigned)&ANSEL*8)+2;
volatile bit ANS3 @ ((unsigned)&ANSEL*8)+3;
volatile bit ANS4 @ ((unsigned)&ANSEL*8)+4;

volatile union {
struct {
unsigned ANS0 : 1;
unsigned ANS1 : 1;
unsigned ANS2 : 1;
unsigned ANS3 : 1;
unsigned ANS4 : 1;
};
} ANSELbits @ 0x188;



volatile unsigned char ANSELH @ 0x189;

volatile bit ANS8 @ ((unsigned)&ANSELH*8)+0;
volatile bit ANS9 @ ((unsigned)&ANSELH*8)+1;
volatile bit ANS10 @ ((unsigned)&ANSELH*8)+2;
volatile bit ANS11 @ ((unsigned)&ANSELH*8)+3;
volatile bit ANS12 @ ((unsigned)&ANSELH*8)+4;
volatile bit ANS13 @ ((unsigned)&ANSELH*8)+5;

volatile union {
struct {
unsigned ANS8 : 1;
unsigned ANS9 : 1;
unsigned ANS10 : 1;
unsigned ANS11 : 1;
unsigned ANS12 : 1;
unsigned ANS13 : 1;
};
} ANSELHbits @ 0x189;



volatile unsigned char EECON1 @ 0x18C;

volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;

volatile union {
struct {
unsigned RD : 1;
unsigned WR : 1;
unsigned WREN : 1;
unsigned WRERR : 1;
unsigned : 3;
unsigned EEPGD : 1;
};
} EECON1bits @ 0x18C;



volatile unsigned char EECON2 @ 0x18D;


# 27 "C:\Program Files\HI-TECH Software\PICC\9.83\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files\HI-TECH Software\PICC\9.83\include\eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "C:\Program Files\HI-TECH Software\PICC\9.83\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 12 "C:\Program Files\HI-TECH Software\PICC\9.83\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 31 "C:\Program Files\HI-TECH Software\PICC\9.83\include\stdarg.h"
typedef void * va_list[1];

#pragma inline(__va_start)
extern void * __va_start(void);

#pragma inline(__va_arg)
extern void * __va_arg(void *, ...);

# 27 "C:\Program Files\HI-TECH Software\PICC\9.83\include\stdio.h"
extern int errno;

# 58
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files\HI-TECH Software\PICC\9.83\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 103 "C:\Program Files\HI-TECH Software\PICC\9.83\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);

# 195
extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list);
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 16 "D:\MyWorks\CYD670(C16F883)\CYD670\typedefs.h"
typedef signed char S8;
typedef signed short int S16;



typedef unsigned char U8;
typedef unsigned short int U16;
typedef unsigned long U32;

# 46
typedef union {
U8 byte;
struct{
unsigned b0 :1;
unsigned b1 :1;
unsigned b2 :1;
unsigned b3 :1;
unsigned b4 :1;
unsigned b5 :1;
unsigned b6 :1;
unsigned b7 :1;
}bits;
}ubyte;

typedef union {
U16 word;
U8 byte[2];
struct{
unsigned b0 :1;
unsigned b1 :1;
unsigned b2 :1;
unsigned b3 :1;
unsigned b4 :1;
unsigned b5 :1;
unsigned b6 :1;
unsigned b7 :1;
unsigned b8 :1;
unsigned b9 :1;
unsigned b10:1;
unsigned b11:1;
unsigned b12:1;
unsigned b13:1;
unsigned b14:1;
unsigned b15:1;
}bits;
}uword;

# 124
typedef union {
U8 EEBuf[8];
struct
{
U8 bR1;
U8 bMODE;
U16 wMTCnt;
U16 wTZCnt;
U8 bINIT;
S8 bOffSetT;
}std;
}uEDT;

# 12 "D:\MyWorks\CYD670(C16F883)\CYD670\InitMcu.h"
extern void pInitMCU (void);

# 14 "D:\MyWorks\CYD670(C16F883)\CYD670\drv_key.h"
extern unsigned char bKeyOld;
extern unsigned char bKeyCnt;


extern ubyte bKeyData;

# 27
extern U8 pReadKey (void);
extern void pScanKey (void);

# 22 "D:\MyWorks\CYD670(C16F883)\CYD670\drv_disp.h"
extern const U8 tabSeg [];
extern U8 bSeg0;
extern U8 bSeg1;
extern U8 bSeg2;
extern ubyte bLed;

# 34
extern void pConDisp (U16 dat,U8 dot);
extern void pScanDisp (void);
extern void pClrDisp (void);

# 33 "D:\MyWorks\CYD670(C16F883)\CYD670\drv_uart_debug.h"
extern void pInitUART (void);
extern void putch(unsigned char);
extern unsigned char getch(void);
extern unsigned char getche(void);

# 58 "D:\MyWorks\CYD670(C16F883)\CYD670\system.h"
extern bit fPowerOn;

extern U8 bKeyNum;

# 27 "D:\MyWorks\CYD670(C16F883)\CYD670\main.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0xFFFC & 0xFFF7 & 0xFFEF & 0xFFDF & 0xFFFF & 0xFFFF & 0xFBFF & 0xFFFF & 0xEFFF & 0xFFFF");
asm("\tpsect idloc,class=IDLOC,delta=2"); asm("\tglobal\tidloc_word"); asm("idloc_word"); asm("\tirpc\t__arg," "0000"); asm("\tdw 0&__arg&h"); asm("\tendm");

# 35
bit f10ms=0;
U8 b10ms=0;
U8 b50ms=0;
U8 b1s=0;
U8 bTBCnt=0;

# 49
bit fKeyPress = 0;
U8 bKeyHTCnt = 0;


U8 bRunMode=0;
U8 bRunStep=0;
U8 bRunCnt=0;

# 62
U32 bSetTmp=0;

U8 bHour = 0;
U8 bMin = 0;
U8 bSec = 0;


bit fFlash=0;
U8 bFlashCnt=0;



bit fRunWash=0;
U8 bRunWashStep=0;
U8 bRunWashT=0;


U8 bPulseCnt=0;

bit fCapInit=0;
U8 bTMR1U=30;

bit fCalFlow=0;
U8 bCapT2=0;
U8 bCapT1=0;
U8 bCapT0=0;

U16 wWFlow=0;
bit fFirstLoad = 0;
U16 arrFlow[16];
U8 bFlowIdx = 0;
U16 arrFlow2[8];
U8 bFlowIdx2 = 0;
U32 wSum = 0;

bit fErr=0;

bit fSaveEE=0;
U8 bSaveEECnt=0;

union {
U8 arrEEData[7];
struct {
U32 TOLLITER;
U8 SETHOUR;
U8 SETMIN;
U8 STAT;
} var;
}EE_DATA;

# 130
U8 bTestCnt=0;
U16 wTestPulseCnt=0;
U8 bFilterCnt=0;



void pFunTestKey (void);
void pSwitchMode (U8 mod);
void pTuneValue (U8* ptb,S8 rank,U8 max,U8 min);
void pRstFlash (U8 ft);
void pDispProc (void);
void pKeyProc (void);
void pReadEE(void);

void pTuneHour (void);
void pTuneMin (void);

void pRunStep (U8 step);
void pConLiter (U32 dat,U8 part);
void pConStr (U8 s2,U8 s1,U8 s0);

void pWashFlow (void);
void pCalWaterFlow (void);
void pRunWashFlow (void);

void pTimeProc (void);
void pReLoadTime (void);
void pFlashTimeCtl (void);
void pEESaveTimeCtl (void);

void pTestMode(void);
U8 key_press (void);
U16 filter(U16 *ptArr);




static void interrupt isr (void)
{

if (T0IF)
{
T0IF=0;
TMR0=246;


if (fCapInit)
{
TMR1ON=0;

if (!fCalFlow)
{
if (TMR1IF)
{
TMR1IF=0;
bTMR1U++;
}

bCapT0=TMR1L;
bCapT1=TMR1H;
bCapT2=bTMR1U;
fCalFlow=1;
}
bTMR1U=0;
TMR1=0;
TMR1ON=1;
}

else
{
TMR1=0;
bTMR1U=0;
TMR1IF=0;
TMR1IE=1;
TMR1ON=1;
fCapInit=1;
}


++wTestPulseCnt;
++bPulseCnt;
if (bPulseCnt >= (330/10))
{
bPulseCnt=0;
if (EE_DATA.var.TOLLITER < 999999)
EE_DATA.var.TOLLITER++;
}
}

if (TMR1IF)
{
TMR1IF = 0;

# 229
if (++bTMR1U >= 28)
{
TMR1ON = 0;
TMR1IE = 0;
TMR1IF=0;
bTMR1U=30;
TMR1=0;
fCapInit=0;
fFirstLoad=0;
wWFlow=0;
}

# 247
}

if (TMR2IF)
{
TMR2IF=0;

RB0=1;
RB1=1;
RB2=1;
RA0=1;

if (!RB4)
{
if (!fSaveEE)
{


eeprom_write(01+0,EE_DATA.arrEEData[0]);
eeprom_write(01+1,EE_DATA.arrEEData[1]);
eeprom_write(01+2,EE_DATA.arrEEData[2]);
eeprom_write(01+3,EE_DATA.arrEEData[3]);
bSaveEECnt=0;
fSaveEE=1;

}
}

pScanKey();
pScanDisp();

if (++b10ms>=5)
{
b10ms=0;
f10ms=1;
}
}
}

# 289
void main(void)
{
pInitMCU();
pClrDisp();


fSaveEE=1;
pReadEE();


TMR2ON = 1;
GIE = 1;

bTBCnt=10;
do
{
if (f10ms)
{
f10ms=0;
T0IF=0;
TMR0=246;
bTBCnt--;
}
} while(bTBCnt);


if (!bKeyData.bits.b2 && !bKeyData.bits.b0)
pTestMode();




bRunCnt=0;
bTestCnt=0;

do
{
if (f10ms)
{
f10ms = 0;

bSeg0 = ~tabSeg[bTestCnt];
bSeg1 = ~tabSeg[bTestCnt];
bSeg2 = ~tabSeg[bTestCnt];

if (++bRunCnt>=30)
{
bRunCnt=0;
bTestCnt++;
}
}
}while (bTestCnt!=10);




while (1)
{
if (f10ms)
{
f10ms = 0;
pKeyProc();



switch (bTBCnt)
{
case 0:
pFlashTimeCtl();
pEESaveTimeCtl();
break;

case 1:
pDispProc();
break;

case 2:
pWashFlow();
break;

case 3:

break;

}

if (++bTBCnt >= 10)
{
bTBCnt=0;
}


if (++b50ms >= 5)
{
b50ms=0;
pCalWaterFlow();
}



if (++b1s >= 100)
{
b1s=0;
pTimeProc();
}


}
}
}



void pFlashTimeCtl (void)
{
if (bFlashCnt==0)
{
bFlashCnt = 4;
fFlash = !fFlash;
}
else
bFlashCnt--;
}

# 427
void pKeyProc (void)
{
if (fKeyPress)
{

if (bKeyData.byte == 0xFF)
{
fKeyPress = 0;
}


if (bKeyHTCnt == 0)
{
if (!bKeyData.bits.b2)
{
if (bRunMode == 0)
{
bSetTmp=EE_DATA.var.SETHOUR;
pSwitchMode(1);
}
bKeyHTCnt=255;
}
else if (!bKeyData.bits.b0)
{



}
else if (!bKeyData.bits.b1)
{


bKeyHTCnt = 20;
goto _WASH_KEY;
}
}
else if (bKeyHTCnt != 255)
bKeyHTCnt--;
}

else
{

if (!bKeyData.bits.b2)
{

switch (bRunMode)
{

case 0:
bKeyHTCnt = 200;
break;


case 1:
if (bRunStep==1)
{
if (EE_DATA.var.SETHOUR!=bSetTmp)
{
EE_DATA.var.SETHOUR = bSetTmp;
eeprom_write(05,EE_DATA.var.SETHOUR);
}

pRunStep(2);
}

else if (bRunStep==3)
{
if (EE_DATA.var.SETMIN!=bSetTmp)
{
EE_DATA.var.SETMIN = bSetTmp;
eeprom_write(06,EE_DATA.var.SETMIN);
}

pReLoadTime();
pRunStep(6);
}
break;


case 2:
if (bSetTmp==0)
EE_DATA.var.TOLLITER = 0;
pSwitchMode(0);
break;
}

goto _KPRESS2;
}


else if (!bKeyData.bits.b1)
{
_WASH_KEY:

switch (bRunMode)
{

# 530
case 1:
if (bRunStep==1)
pTuneHour();
if (bRunStep==3)
pTuneMin();
break;


case 2:
if (bRunStep>0)
bSetTmp=0;
break;


default:
pRunWashFlow();
break;
}
goto _KPRESS;
}


else if (!bKeyData.bits.b0)
{

switch (bRunMode)
{

case 0:
pSwitchMode(3);
break;


case 1:

break;


case 2:

break;


case 3:
if (bRunStep<2)
pRunStep(2);
else
pSwitchMode(0);
break;

}

_KPRESS: if (!fKeyPress)
bKeyHTCnt = 70;
_KPRESS2: fKeyPress = 1;
}
}
}


void pSwitchMode (U8 mod)
{
bRunMode=mod;
bRunStep=0;
bRunCnt=0;
{bFlashCnt=3; fFlash=1;};
}


void pTuneHour (void)
{
bSetTmp++;
if (bSetTmp > 24)
bSetTmp=0;

{bFlashCnt=7; fFlash=1;};
bRunCnt=0;
}



void pTuneMin (void)
{
if (EE_DATA.var.SETHOUR==24)
bSetTmp=0;
else
{
bSetTmp+=10;

if (bSetTmp>50)
{
if (EE_DATA.var.SETHOUR == 0)
bSetTmp = 10;
else
bSetTmp = 0;
}
}
{bFlashCnt=7; fFlash=1;};
bRunCnt=0;
}

# 674
void pDispProc (void)
{
U8 s0,s1,s2;

switch (bRunMode)
{



case 0:
pConDisp(wWFlow,1);
break;



case 1:
switch (bRunStep)
{

case 0:
s2=16;
s1=1;
s0=10;

if (++bRunCnt >= 20)
pRunStep(1);
break;


case 1:
s2=17;
s1=10;
s0=10;

if (fFlash)
{
s1=bSetTmp/10;
s0=bSetTmp%10;
}

if (++bRunCnt >= 100)
pSwitchMode(0);
break;


case 2:
s2=17;
s1=EE_DATA.var.SETHOUR/10;
s0=EE_DATA.var.SETHOUR%10;

if (++bRunCnt >= 20)
{
if ((EE_DATA.var.SETHOUR==0)&&(EE_DATA.var.SETMIN==0))
bSetTmp=10;
else if (EE_DATA.var.SETHOUR==24)
bSetTmp=0;
else
bSetTmp=EE_DATA.var.SETMIN;
pRunStep(3);
}
break;


case 3:
s2=18;
s1=10;
s0=10;

if (fFlash)
{
s1=bSetTmp/10;
s0=bSetTmp%10;
}

if (++bRunCnt >= 100)
pRunStep(4);
break;


case 4:
if ((EE_DATA.var.SETHOUR==0)&&(EE_DATA.var.SETMIN==0))
EE_DATA.var.SETMIN = 50;
else if ((EE_DATA.var.SETHOUR==24)&&(EE_DATA.var.SETMIN!=0))
EE_DATA.var.SETMIN = 0;
else
pSwitchMode(0);

pRunStep(5);
break;


case 5:
s2=14;
s1=14;
s0=14;

fErr=1;

if (++bRunCnt >= 20)
pRunStep(6);
break;


case 6:
s2=18;
s1=EE_DATA.var.SETMIN/10;
s0=EE_DATA.var.SETMIN%10;

if (++bRunCnt >= 20)
{
if (fErr)
{
fErr=0;
pSwitchMode(0);
}
else
{
bSetTmp = EE_DATA.var.TOLLITER;
pSwitchMode(2);
}
}
break;
}

bSeg2 = ~tabSeg[s2];
bSeg1 = ~tabSeg[s1];
bSeg0 = ~tabSeg[s0];

break;



case 2:
switch (bRunStep)
{

case 0:
bSeg2 = ~tabSeg[16];
bSeg1 = ~tabSeg[2];
bSeg0 = ~tabSeg[10];

if (++bRunCnt >= 20)
pRunStep(1);
break;


case 1:
pConLiter(bSetTmp,1);

if (++bRunCnt >= 40)
pRunStep(2);
break;


case 2:
pConLiter(bSetTmp,0);

if (++bRunCnt >= 100)
pSwitchMode(0);
break;
}

break;



case 3:
switch (bRunStep)
{

case 0:
s1=bHour/10;
s0=bHour%10;

bSeg2 = ~tabSeg[17];
bSeg1 = ~tabSeg[s1];
bSeg0 = ~tabSeg[s0]&0x7F;

if (++bRunCnt >= 40)
pRunStep(1);
break;


case 1:
s1=bMin/10;
s0=bMin%10;

bSeg2 = ~tabSeg[18];
bSeg1 = ~tabSeg[s1];
bSeg0 = ~tabSeg[s0];

if (++bRunCnt >= 100)
pSwitchMode(0);
break;


case 2:
pConLiter(EE_DATA.var.TOLLITER,1);

if (++bRunCnt >= 40)
pRunStep(3);
break;


case 3:
pConLiter(EE_DATA.var.TOLLITER,0);

if (++bRunCnt >= 100)
pSwitchMode(0);
break;

}

break;
}



if (fRunWash)
{
bLed.bits.b0 = 0;
bLed.bits.b1 = 1;
}
else
{
bLed.bits.b0 = 1;
bLed.bits.b1 = 0;
}
}


void pRunStep (U8 step)
{
bRunCnt=0;
bRunStep=step;
{bFlashCnt=3; fFlash=1;};
}



void pConLiter (U32 dat,U8 part)
{
U8 s0,s1,s2;

if (part==1)
dat/=1000;

s0=dat%10;
dat/=10;
s1=dat%10;
dat/=10;
s2=dat%10;

bSeg0 = ~tabSeg[s0];
bSeg1 = ~tabSeg[s1];
bSeg2 = ~tabSeg[s2];



if (part==0)
{
bSeg0 &= 0x7F;




}
}

# 956
void pWashFlow (void)
{
if (fRunWash)
{

pReLoadTime();
switch (bRunWashStep)
{

case 0:
RA2=1;
RA1=0;

if (++bRunWashT >= 100)
{
bRunWashT=0;
bRunWashStep++;
}
break;


case 1:
RA2=1;
RA1=1;

if (++bRunWashT >= 100)
{
bRunWashT=0;
bRunWashStep=0;
fRunWash=0;
}
break;
}
}
else
{
RA2=0;
RA1=0;
bRunWashStep=0;
bRunWashT=0;
}
}

void pRunWashFlow (void)
{
if (!fRunWash)
{
fRunWash=1;
bRunWashStep=0;
bRunWashT=0;
}
}

# 1034
void pCalWaterFlow (void)
{
U8 i;
U16 diff;
U32 tmp,val;

if (fCalFlow)
{
fCalFlow=1;

tmp = ((U32)bCapT2<<16)+((U32)bCapT1<<8)+(U32)bCapT0-250;
fCalFlow=0;


if (tmp < 30300)
tmp = 30300;
if (tmp >=909090)
tmp = 909090;
val = ((U32)181818182L / tmp);

if (fFirstLoad)
{
arrFlow[bFlowIdx]=val;
if (++bFlowIdx >= 16)
bFlowIdx=0;
}
else
{
for (i=0;i<16;i++)
arrFlow[i]=val;
val = filter(arrFlow);
wSum = val<<3;
val = (val+5)/10;

for (i=0;i<8;i++)
arrFlow2[i]=val;

bFlowIdx=0;
bFlowIdx2=0;
wWFlow = val;
bFilterCnt=10;

fFirstLoad = 1;
}

# 1085
val = filter(arrFlow);
wSum = wSum - (wSum >> 3) + val;
val = wSum >> 3;
val = (val+5)/10;

if (wWFlow >= val)
diff = wWFlow - val;
else
diff = val - wWFlow;

if (diff >15)
fFirstLoad=0;
if (diff <= 1)
val = wWFlow;

arrFlow2[bFlowIdx2]=val;
if (++bFlowIdx2 >= 8)
bFlowIdx2=0;



tmp=0;
for (i=0;i<8;i++)
tmp+=arrFlow2[i];
val = (tmp>>3);

# 1124
if (val != wWFlow)
{
if (++bFilterCnt >= 20)
{
wWFlow = val;
bFilterCnt=10;
}
}
else
{
if (bFilterCnt>0)
bFilterCnt--;
}




}
else if (bTMR1U >= 30)
wWFlow = 0;

}

# 1151
U16 filter(U16 *ptArr)
{
U8 i,j;
U16 value_buf[16];
U32 sum,tmp;


for (i=0;i<16;i++)
value_buf[i]=*ptArr++;


for (i=0;i<15;i++)
{
for (j=(i+1);j<16;j++)
{
if (value_buf[i] > value_buf[j])
{
tmp = value_buf[i];
value_buf[i] = value_buf[j];
value_buf[j] = tmp;
}
}
}

sum=0;
for (i=4;i<=11;i++)
sum+=value_buf[i];
sum>>=3;

return sum;
}

# 1196
void pTimeProc (void)
{
U16 tmp;

if (++bSec>=60)
{
bSec=0;
tmp = (U16)bHour*60+(U16)bMin;
tmp--;

bHour = tmp/60;
bMin = tmp%60;

if ((bHour==0)&&(bMin==0))
{
pReLoadTime();
pRunWashFlow();
}
}

# 1242
}


void pReLoadTime (void)
{
bHour = EE_DATA.var.SETHOUR;
bMin = EE_DATA.var.SETMIN;
bSec = 0;
b1s = 0;
}

# 1258
void pReadEE(void)
{
eecpymem(EE_DATA.arrEEData,01,7);


if (EE_DATA.var.STAT!=0xA5)
{
EE_DATA.var.TOLLITER = 0;
EE_DATA.var.SETHOUR=1;
EE_DATA.var.SETMIN=0;
EE_DATA.var.STAT = 0xA5;
memcpyee(01,EE_DATA.arrEEData,7);
}

pReLoadTime();
}



void pEESaveTimeCtl (void)
{
if (bSaveEECnt >= 50)
fSaveEE=0;
else
bSaveEECnt++;
}

# 1289
void pTestMode(void)
{
U8 stat;


fSaveEE=1;

while (1)
{

while(key_press());



while(1)
{
if (f10ms)
pConLiter(EE_DATA.var.TOLLITER,0);

if (!bKeyData.bits.b0)
break;
}


pClrDisp();
while(key_press());



bRunCnt=0;
bTestCnt=0;
bLed.byte = 0x01;
while(1)
{
if (f10ms)
{
f10ms = 0;
if (bRunCnt==0)
{
bRunCnt=40;
switch (bTestCnt)
{
case 10:
bSeg2 = 0b01111111;
bSeg1 = 0b01111111;
bSeg0 = 0b01111111;
break;

case 11:
bSeg2 = 0b00000000;
bSeg1 = 0b11111111;
bSeg0 = 0b11111111;
break;

case 12:
bSeg2 = 0b11111111;
bSeg1 = 0b00000000;
bSeg0 = 0b11111111;
break;

case 13:
bSeg2 = 0b11111111;
bSeg1 = 0b11111111;
bSeg0 = 0b00000000;
break;

default:
bSeg2 = ~tabSeg[bTestCnt];
bSeg1 = ~tabSeg[bTestCnt];
bSeg0 = ~tabSeg[bTestCnt];
break;
}

if (++bTestCnt > 13)
bTestCnt=0;


bLed.byte ^= 0x03;
}
else
bRunCnt--;

if (!bKeyData.bits.b0)
break;
}
}

pClrDisp();
while(key_press());


stat=0;
bRunCnt=0;
bTestCnt=0;

while(1)
{
if (f10ms)
{
f10ms=0;

if (!bKeyData.bits.b2)
{
if (bRunCnt >= 10)
bTestCnt=1;
else
bRunCnt++;
}
else if (!bKeyData.bits.b1)
{
if (bRunCnt >= 10)
bTestCnt=2;
else
bRunCnt++;
}
else if (!bKeyData.bits.b0)
{
if (bRunCnt >= 10)
bTestCnt=3;
else
bRunCnt++;
}

# 1418
else
{
if (bRunCnt==0)
{
if (bTestCnt==1)
stat|=1;
else if (bTestCnt==2)
stat|=2;
else if (bTestCnt==3)
stat|=4;


bTestCnt=0;
}
else
bRunCnt--;
}

pConDisp(bTestCnt,0);

if (!bKeyData.bits.b0 && (stat==0x07))
break;
}
}

pClrDisp();
while(key_press());


wTestPulseCnt=0;
bTestCnt=0;
EE_DATA.var.TOLLITER=0;
bLed.bits.b1=0;
while (1)
{
if (f10ms)
{
f10ms=0;

if (fKeyPress)
{
if (bKeyData.bits.b2 && bKeyData.bits.b1)
fKeyPress=0;
}
else if (!bKeyData.bits.b1)
{
if (++bTestCnt >= 3)
bTestCnt=0;
fKeyPress=1;
}
else if (!bKeyData.bits.b2)
{
wTestPulseCnt=0;
bTestCnt=0;
EE_DATA.var.TOLLITER=0;
fKeyPress=1;
}


if (bTestCnt==0)
pConDisp(wWFlow,1);
else if (bTestCnt==1)
pConDisp(wTestPulseCnt,0);
else
pConLiter(EE_DATA.var.TOLLITER,0);


if (++b50ms >= 2)
{
b50ms=0;
pCalWaterFlow();
}

if (!bKeyData.bits.b0)
break;
}
}

pClrDisp();
while(key_press());



bSeg2 = ~0x3F;
bSeg1 = ~0x2F;
bSeg0 = ~0x66;

RA2=0;
RA1=1;

while(1)
{
if (f10ms)
{
f10ms=0;


if (++bRunWashT >= 40)
{
bRunWashT=0;
PORTA ^= 0b00000110;
}
}

if (!bKeyData.bits.b0)
break;
}

pClrDisp();
RA2=0;
RA1=0;
while(key_press());

# 1536
stat=0;
bTestCnt=0x55;
while (1)
{

for (bRunCnt=0;bRunCnt<8;bRunCnt++)
eeprom_write(01+bRunCnt,bTestCnt);


for (bRunCnt=0;bRunCnt<8;bRunCnt++)
{
if (eeprom_read(01+bRunCnt) != bTestCnt)
stat=1;
}

if ((stat==1)||(bTestCnt==0x00))
break;
else if (bTestCnt==0x55)
bTestCnt=0xAA;
else
bTestCnt=0;
}

eecpymem(EE_DATA.arrEEData,01,7);

if (stat==0)
{
bSeg2 = ~0x7A;
bSeg1 = ~0x75;
bSeg0 = ~0x00;
}
else
{
bSeg2 = ~0x76;
bSeg1 = ~0x42;
bSeg0 = ~0x42;
}

while (bKeyData.bits.b0);

}
}




U8 key_press (void)
{
if (bKeyData.byte == 0xFF)
return 0;
else
{
bSeg2 = 0b10111111;
bSeg1 = 0b10111111;
bSeg0 = 0b10111111;
return 1;
}
}

